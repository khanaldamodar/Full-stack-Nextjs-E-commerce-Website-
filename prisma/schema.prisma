datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}



model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  password       String
  phone          String?   @unique
  address        String?
  role           Role      @default(ADMIN)
  isVerified     Boolean   @default(false)
  profileImage   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  productsCreated Product[]
  packagesCreated Package[]
  orders         Order[]
  payments       Payment[]
}

enum Role {
  USER
  ADMIN
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String?     
  products Product[]
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int       @default(0)
  sku         String?   @unique
  weight      Float?
  imageUrl    String?
  gallery     String?
  isFeatured  Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])

  brandId     Int?
  brand       Brand?    @relation(fields: [brandId], references: [id])

  createdById Int?
  createdBy   User?     @relation(fields: [createdById], references: [id])

  packages    Package[] @relation("PackageProducts")
  orderItems  OrderItem[]
}

model Package {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  discount     Float?    @default(0)
  stock        Int       @default(0)
  imageUrl     String?
  isFeatured   Boolean   @default(false)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  createdById Int?
  createdBy   User?      @relation(fields: [createdById], references: [id])

  products    Product[]  @relation("PackageProducts") // many-to-many
}

model Order {
  id              Int          @id @default(autoincrement())
  userId          Int
  user            User         @relation(fields: [userId], references: [id])
  total           Float
  status          OrderStatus  @default(PENDING)
  shippingAddress String
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  items           OrderItem[]
  payments        Payment[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int      @default(1)
  price      Float
}

model Payment {
  id           Int           @id @default(autoincrement())
  orderId      Int
  order        Order         @relation(fields: [orderId], references: [id])
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  amount       Float
  method       PaymentMethod
  status       PaymentStatus @default(PENDING)
  transactionId String?
  paymentData  Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  ONLINE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
